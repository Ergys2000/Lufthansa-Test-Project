{"ast":null,"code":"/** Gets the projects of a user\n* @function getUserProjects\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @returns {Project[]} List of user projects\n* */\nconst getUserProjects = (userId, jwtToken) => {\n  return new Promise((resolve, reject) => {\n    resolve([{\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }, {\n      id: 1,\n      title: \"Personal Project\",\n      ownerId: 1,\n      createdOn: new Date(\"2021-2-3\")\n    }]);\n  });\n};\n/** Gets the issues of a project\n* @function getUserProjects\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @param projectId - The id of the project\n* @returns {Promise} Promise which resolves with a list of issues\n* */\n\n\nconst getProjectAllIssues = (userId, jwtToken, projectId) => {\n  return new Promise((resolve, reject) => {\n    resolve([{\n      id: 1,\n      projectId: 2,\n      title: \"Title\",\n      description: \"Issue description\",\n      status: \"open\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }, {\n      id: 1,\n      projectId: 2,\n      title: \"Title\",\n      description: \"Issue description\",\n      status: \"closed\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }, {\n      id: 1,\n      projectId: 2,\n      title: \"Title\",\n      description: \"Issue description\",\n      status: \"closed\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }, {\n      id: 1,\n      projectId: 2,\n      title: \"Title, this is a long title that should not be rendered completely\",\n      description: \"Issue descriptions, this is a long description, that should not be rendered completely.\",\n      status: \"open\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }]);\n  });\n};\n/** Gets the closed issues of a project\n* @function getProjectOpenIssues\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @param projectId - The id of the project\n* @returns {Promise} Promise which resolves with a list of issues\n* */\n\n\nconst getProjectOpenIssues = (userId, jwtToken, projectId) => {\n  return new Promise((resolve, reject) => {\n    resolve([{\n      id: 1,\n      projectId: 2,\n      title: \"Title\",\n      description: \"Issue description\",\n      status: \"open\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }, {\n      id: 1,\n      projectId: 2,\n      title: \"Title, this is a long title that should not be rendered completely\",\n      description: \"Issue descriptions, this is a long description, that should not be rendered completely.\",\n      status: \"open\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }]);\n  });\n};\n/** Gets the closed issues of a project\n* @function getProjectClosedIssues\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @param projectId - The id of the project\n* @returns {Promise} Promise which resolves with a list of issues\n* */\n\n\nconst getProjectClosedIssues = (userId, jwtToken, projectId) => {\n  return new Promise((resolve, reject) => {\n    resolve([{\n      id: 1,\n      projectId: 2,\n      title: \"Title\",\n      description: \"Issue description\",\n      status: \"closed\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }, {\n      id: 1,\n      projectId: 2,\n      title: \"Title\",\n      description: \"Issue description\",\n      status: \"closed\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }]);\n  });\n};\n/** Gets the user issues of a project\n* @function getProjectUserIssues\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @param projectId - The id of the project\n* @returns {Promise} Promise which resolves with a list of issues\n* */\n\n\nconst getProjectUserIssues = (userId, jwtToken, projectId) => {\n  return new Promise((resolve, reject) => {\n    resolve([{\n      id: 1,\n      projectId: 2,\n      title: \"Title\",\n      description: \"Issue description\",\n      status: \"closed\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"high\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }, {\n      id: 1,\n      projectId: 2,\n      title: \"Title\",\n      description: \"Issue description\",\n      status: \"open\",\n      reporterId: 2,\n      reporter: \"Ergys Rrjolli\",\n      asigneeId: 2,\n      asignee: \"Ergys Rrjolli\",\n      priority: \"medium\",\n      createdOn: new Date(Date.now()),\n      deadline: new Date(\"2021-4-21\")\n    }]);\n  });\n};\n/** Add a project issue\n* @function postProjectIssue\n* @param userId {number} The user id\n* @param jwtToken {string} The authentication token\n* @param projectId {number} The project Id\n* @param issue {number} The issue id\n* @returns {Promise} Promise which resolves with an api response\n* */\n\n\nconst postProjectIssue = (userId, jwtToken, issue) => {\n  return new Promise((resolve, reject) => {\n    resolve({\n      status: \"OK\",\n      result: null,\n      message: \"Issue added\"\n    });\n  });\n};\n/** Updates a project issue\n* @function putProjectIssue\n* @param userId {number} The user id\n* @param jwtToken {string} The authentication token\n* @param projectId {number} The project Id\n* @param issueId {number} The issue id\n* @returns {Promise} Promise which resolves with an api response\n* */\n\n\nconst putProjectIssue = (userId, jwtToken, issue) => {\n  return new Promise((resolve, reject) => {\n    resolve({\n      status: \"OK\",\n      result: null,\n      message: \"Issue updated\"\n    });\n  });\n};\n/** Gets the comments of an issue\n* @function getProjectIssueComments\n* @param userId {number} The user id \n* @param jwtToken {string} The jwt token\n* @param projectId {number} The id of the project\n* @param issueId {number} The id of the issue\n* @returns {Promise} Promise which resolves with a list of issue comments\n* */\n\n\nconst getProjectIssueComments = (userId, jwtToken, projectId, issueId) => {\n  return new Promise((resolve, reject) => {\n    resolve([{\n      id: 1,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 2,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 3,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 4,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 5,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 6,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 7,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 8,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 9,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }, {\n      id: 10,\n      userId: 2,\n      author: \"Ergys Rrjolli\",\n      comment: \"This is a comment on the issue\"\n    }]);\n  });\n};\n\nexport { getUserProjects, getProjectAllIssues, getProjectOpenIssues, getProjectClosedIssues, getProjectUserIssues, postProjectIssue, putProjectIssue, getProjectIssueComments };","map":{"version":3,"sources":["/home/ergys/Desktop/Projects/Java/lufthansa-test-project/FrontEndClient/src/API.tsx"],"names":["getUserProjects","userId","jwtToken","Promise","resolve","reject","id","title","ownerId","createdOn","Date","getProjectAllIssues","projectId","description","status","reporterId","reporter","asigneeId","asignee","priority","now","deadline","getProjectOpenIssues","getProjectClosedIssues","getProjectUserIssues","postProjectIssue","issue","result","message","putProjectIssue","getProjectIssueComments","issueId","author","comment"],"mappings":"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","sourcesContent":["import { Project, Issue, Comment } from './types/Common';\n\ntype ApiResponse = {\n\tstatus: string;\n\tresult: null | any[] | any;\n\tmessage: string | null;\n};\n\n/** Gets the projects of a user\n* @function getUserProjects\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @returns {Project[]} List of user projects\n* */\nconst getUserProjects = (userId: number, jwtToken: string): Promise<Project[]> => {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve([\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t\t{ id: 1, title: \"Personal Project\", ownerId: 1, createdOn: new Date(\"2021-2-3\") },\n\t\t]);\n\t});\n}\n\n/** Gets the issues of a project\n* @function getUserProjects\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @param projectId - The id of the project\n* @returns {Promise} Promise which resolves with a list of issues\n* */\nconst getProjectAllIssues = (userId: number, jwtToken: string, projectId: number): Promise<Issue[]> => {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve([\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title\",\n\t\t\t\tdescription: \"Issue description\",\n\t\t\t\tstatus: \"open\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title\",\n\t\t\t\tdescription: \"Issue description\",\n\t\t\t\tstatus: \"closed\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title\",\n\t\t\t\tdescription: \"Issue description\",\n\t\t\t\tstatus: \"closed\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title, this is a long title that should not be rendered completely\",\n\t\t\t\tdescription: \"Issue descriptions, this is a long description, that should not be rendered completely.\",\n\t\t\t\tstatus: \"open\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t]);\n\t});\n}\n\n/** Gets the closed issues of a project\n* @function getProjectOpenIssues\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @param projectId - The id of the project\n* @returns {Promise} Promise which resolves with a list of issues\n* */\nconst getProjectOpenIssues = (userId: number, jwtToken: string, projectId: number): Promise<Issue[]> => {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve([\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title\",\n\t\t\t\tdescription: \"Issue description\",\n\t\t\t\tstatus: \"open\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title, this is a long title that should not be rendered completely\",\n\t\t\t\tdescription: \"Issue descriptions, this is a long description, that should not be rendered completely.\",\n\t\t\t\tstatus: \"open\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t]);\n\t});\n}\n\n/** Gets the closed issues of a project\n* @function getProjectClosedIssues\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @param projectId - The id of the project\n* @returns {Promise} Promise which resolves with a list of issues\n* */\nconst getProjectClosedIssues = (userId: number, jwtToken: string, projectId: number): Promise<Issue[]> => {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve([\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title\",\n\t\t\t\tdescription: \"Issue description\",\n\t\t\t\tstatus: \"closed\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title\",\n\t\t\t\tdescription: \"Issue description\",\n\t\t\t\tstatus: \"closed\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t]);\n\t});\n}\n\n\n/** Gets the user issues of a project\n* @function getProjectUserIssues\n* @param userId - The id of the user\n* @param jwtToken - The api token\n* @param projectId - The id of the project\n* @returns {Promise} Promise which resolves with a list of issues\n* */\nconst getProjectUserIssues = (userId: number, jwtToken: string, projectId: number): Promise<Issue[]> => {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve([\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title\",\n\t\t\t\tdescription: \"Issue description\",\n\t\t\t\tstatus: \"closed\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"high\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tprojectId: 2,\n\t\t\t\ttitle: \"Title\",\n\t\t\t\tdescription: \"Issue description\",\n\t\t\t\tstatus: \"open\",\n\t\t\t\treporterId: 2,\n\t\t\t\treporter: \"Ergys Rrjolli\",\n\t\t\t\tasigneeId: 2,\n\t\t\t\tasignee: \"Ergys Rrjolli\",\n\t\t\t\tpriority: \"medium\",\n\t\t\t\tcreatedOn: new Date(Date.now()),\n\t\t\t\tdeadline: new Date(\"2021-4-21\")\n\t\t\t},\n\t\t]);\n\t});\n}\n\n/** Add a project issue\n* @function postProjectIssue\n* @param userId {number} The user id\n* @param jwtToken {string} The authentication token\n* @param projectId {number} The project Id\n* @param issue {number} The issue id\n* @returns {Promise} Promise which resolves with an api response\n* */\nconst postProjectIssue = (userId: number, jwtToken: string, issue: Issue): Promise<ApiResponse> => {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve({ status: \"OK\", result: null, message: \"Issue added\" });\n\t});\n}\n\n/** Updates a project issue\n* @function putProjectIssue\n* @param userId {number} The user id\n* @param jwtToken {string} The authentication token\n* @param projectId {number} The project Id\n* @param issueId {number} The issue id\n* @returns {Promise} Promise which resolves with an api response\n* */\nconst putProjectIssue = (userId: number, jwtToken: string, issue: Issue): Promise<ApiResponse> => {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve({ status: \"OK\", result: null, message: \"Issue updated\" });\n\t});\n}\n\n/** Gets the comments of an issue\n* @function getProjectIssueComments\n* @param userId {number} The user id \n* @param jwtToken {string} The jwt token\n* @param projectId {number} The id of the project\n* @param issueId {number} The id of the issue\n* @returns {Promise} Promise which resolves with a list of issue comments\n* */\nconst getProjectIssueComments = (userId: number, jwtToken: string, projectId: number, issueId: number): Promise<Comment[]> => {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve([\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 4,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 5,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 6,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 7,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 8,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 9,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 10,\n\t\t\t\tuserId: 2,\n\t\t\t\tauthor: \"Ergys Rrjolli\",\n\t\t\t\tcomment: \"This is a comment on the issue\"\n\t\t\t},\n\t\t]);\n\t});\n}\n\nexport {\n\tgetUserProjects,\n\tgetProjectAllIssues,\n\tgetProjectOpenIssues,\n\tgetProjectClosedIssues,\n\tgetProjectUserIssues,\n\tpostProjectIssue,\n\tputProjectIssue,\n\tgetProjectIssueComments,\n};\n"]},"metadata":{},"sourceType":"module"}